{"version":3,"sources":["serviceWorker.js","constants.js","helpers.js","reducers/cryptocurrencies.js","reducers/index.js","actions/index.js","components/dataTable/TableHeader.js","containers/CryptocurrenciesTableHeader.js","components/dataTable/TableRows.js","containers/CryptocurrenciesTableRows.js","components/dataTable/DataTable.js","components/addList/AddList.js","components/dropdownmenu/Dropdown.js","components/App.js","containers/MainContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","HEADER_MAP","symbol","cmcRank","price","action","sortByKey","array","key","isAscending","sort","a","b","x","y","initialState","addingLimitReached","items","loading","error","combineReducers","cryptocurrencies","state","type","Object","values","payload","map","obj","index","id","isInTrackTable","item","temp","quotes","find","quote","cmc_rank","USD","toggleDisplay","fetchQuotes","ids","dispatch","fetchCryptocurrenciesBegin","fetch","join","then","handleErrors","res","json","fetchQuotesSuccess","data","catch","fetchCryptocurrenciesFailure","response","ok","Error","statusText","fetchCryptocurrenciesSuccess","TableHeader","props","useState","toggleSortOrder","keys","className","onClick","connect","TableRows","rows","removeRow","row","length","bind","filter","t","DataTable","CryptocurrenciesTableHeader","CryptocurrenciesTableRows","addCryptocurrency","getQuote","preventAdding","addListItems","trackedItems","addListItem","Dropdown","menuVisibility","setMenuVisibility","onDropDownClick","useCallback","e","preventDefault","useEffect","document","addEventListener","removeEventListener","menuItems","defaultProps","App","fetchCryptocurrencies","this","message","Component","store","createStore","rootReducer","applyMiddleware","thunk","render","MainContainer","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.30df2b27.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Texts\nexport const SYMBOL = \"Symbol\";\nexport const CMC_RANK = \"CMC Rank\";\nexport const PRICE = \"Price\";\nexport const REMOVE = \"Remove\";\nexport const ADD_CRYPTOCURRENCY = \"Add Cryptocurrency\";\nexport const CRYPTOCURRENCY_TRACKER = \"Cryptocurrency Tracker\";\nexport const ADD_LIMIT_MESSAGE = \"Can't add more than 10 items\";\nexport const LOADING_MESSAGE = \"Loading...\";\nexport const ERROR_MESSAGE = \"Error!\";\n\n// Actions\nexport const FETCH_QUOTES_SUCCESS = 'FETCH_QUOTES_SUCCESS';\nexport const FETCH_CRYPTOCURRENCIES_BEGIN = 'FETCH_CRYPTOCURRENCIES_BEGIN';\nexport const FETCH_CRYPTOCURRENCIES_SUCCESS = 'FETCH_CRYPTOCURRENCIES_SUCCESS';\nexport const FETCH_CRYPTOCURRENCIES_FAILURE = 'FETCH_CRYPTOCURRENCIES_FAILURE';\nexport const ADD_LIMIT_REACHED = 'ADD_LIMIT_REACHED';\nexport const TOGGLE_DISPLAY = 'TOGGLE_DISPLAY';\nexport const SORT_BY_KEY = 'SORT_BY_KEY';\n\n// Maps\nexport const HEADER_MAP = {\n    symbol: SYMBOL,\n    cmcRank: CMC_RANK,\n    price: PRICE,\n    action: REMOVE\n}","export const sortByKey = (array, key, isAscending) => {\n    return array.sort(function (a, b) {\n        var x = a[key]; var y = b[key];\n        if (isAscending) {\n            return ((x > y) ? -1 : ((x < y) ? 1 : 0));\n        }\n        return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n    });\n}","import {\n    FETCH_QUOTES_SUCCESS,\n    FETCH_CRYPTOCURRENCIES_BEGIN,\n    FETCH_CRYPTOCURRENCIES_SUCCESS,\n    FETCH_CRYPTOCURRENCIES_FAILURE,\n    SORT_BY_KEY,\n    TOGGLE_DISPLAY,\n    ADD_LIMIT_REACHED\n} from '../constants';\nimport { sortByKey } from '../helpers';\n\nconst initialState = {\n    addingLimitReached: false,\n    items: [],\n    loading: false,\n    error: null\n};\n\nexport default function cryptocurrencies(state = initialState, action) {\n    switch (action.type) {\n        case FETCH_CRYPTOCURRENCIES_BEGIN:\n            return {\n                ...state,\n                loading: true,\n                error: null\n            };\n\n        case FETCH_CRYPTOCURRENCIES_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                items: Object.values(action.payload.cryptocurrencies).map((obj, index) => ({ id: obj.id, cmcRank: 0, symbol: obj.symbol, price: 0, isInTrackTable: index <5 ? true : false }))\n            };\n        \n        case FETCH_QUOTES_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                items: state.items.map(item => {\n                    let temp = Object.values(action.payload.quotes).find(quote => item.id === quote.id);\n                    if(temp){\n                        item.cmcRank= temp.cmc_rank;\n                        item.price = temp.quote?.USD.price;\n                    }\n                        return item;\n                    \n                })\n            };\n\n        case FETCH_CRYPTOCURRENCIES_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload.error,\n                items: []\n            };\n\n        case TOGGLE_DISPLAY:\n            return {\n                ...state, addingLimitReached: false, items: state.items.map(item =>\n                (item.id === action.id)\n                    ? { ...item, isInTrackTable: !item.isInTrackTable }\n                    : item\n            )}\n\n        case SORT_BY_KEY:\n            return {\n                ...state, items: sortByKey(state.items, action.key, action.isAscending)\n            }\n\n        case ADD_LIMIT_REACHED:\n            return {\n                ...state, \n                addingLimitReached: true\n            }\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux';\nimport cryptocurrencies from './cryptocurrencies';\n\nexport default combineReducers({\n    cryptocurrencies,\n})\n","import { \n    FETCH_QUOTES_SUCCESS, \n    FETCH_CRYPTOCURRENCIES_BEGIN, \n    FETCH_CRYPTOCURRENCIES_SUCCESS, \n    FETCH_CRYPTOCURRENCIES_FAILURE, \n    ADD_LIMIT_REACHED, \n    TOGGLE_DISPLAY, \n    SORT_BY_KEY\n} from '../constants';\n\nexport const toggleDisplay = id => ({\n    type: TOGGLE_DISPLAY,\n    id\n})\n\nexport const sortByKey = (key, isAscending) => ({\n    type: SORT_BY_KEY,\n    key,\n    isAscending\n})\n\nexport function fetchQuotes(ids) {\n    return async dispatch => {\n        dispatch(fetchCryptocurrenciesBegin());\n        return fetch(`https://www.stackadapt.com/coinmarketcap/quotes?id=${ids.join()}`)\n            .then(handleErrors)\n            .then(res => res.json())\n            .then(json => {\n                dispatch(fetchQuotesSuccess(json.data));\n                return json.data;\n            })\n            .catch(error => dispatch(fetchCryptocurrenciesFailure(error)));\n    };\n}\n\nexport function fetchCryptocurrencies() {\n    return async dispatch => {\n        dispatch(fetchCryptocurrenciesBegin());\n        return fetch(\"https://www.stackadapt.com/coinmarketcap/map\")\n            .then(handleErrors)\n            .then(res => res.json())\n            .then(json => {\n                dispatch(fetchQuotes([1, 2, 3, 4, 5]));\n                dispatch(fetchCryptocurrenciesSuccess(json.data));\n                return json.data;\n            })\n            .catch(error => dispatch(fetchCryptocurrenciesFailure(error)));\n    };\n}\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nexport const fetchCryptocurrenciesBegin = () => ({\n    type: FETCH_CRYPTOCURRENCIES_BEGIN\n});\n\nexport const fetchCryptocurrenciesSuccess = cryptocurrencies => ({\n    type: FETCH_CRYPTOCURRENCIES_SUCCESS,\n    payload: { cryptocurrencies }\n});\n\nexport const fetchQuotesSuccess = quotes => ({\n    type: FETCH_QUOTES_SUCCESS,\n    payload: { quotes }\n});\n\nexport const fetchCryptocurrenciesFailure = error => ({\n    type: FETCH_CRYPTOCURRENCIES_FAILURE,\n    payload: { error }\n});\n\nexport const triggerAddingLimit = addingLimitReached => ({\n    type: ADD_LIMIT_REACHED,\n    payload: { addingLimitReached }\n});\n\n\n\n","import React, { useState } from 'react';\nimport { HEADER_MAP, REMOVE } from '../../constants';\n\nconst TableHeader = props => {\n    const { sortByKey } = props;\n    const [isAscending, toggleSortOrder] = useState(false);\n\n    return <tr>\n        {Object.keys(HEADER_MAP).map((key, index) => {\n            if (HEADER_MAP[key] !== REMOVE) {\n                return (\n                    <th key={index}>\n                        <div className=\"cryptocurrency-table__header-wrapper\">\n                            {HEADER_MAP[key]}\n                            <div className=\"cryptocurrency-table__sorting-wrapper\" onClick={() => { toggleSortOrder(!isAscending); sortByKey(key, isAscending) }}>\n                                <i className=\"arrow up\"></i>\n                                <i className=\"arrow down\"></i>\n                            </div>\n                        </div>\n                    </th>)\n            }\n            return <th key={index}></th>\n        })}\n    </tr>\n}\n\nexport default TableHeader;","import { connect } from 'react-redux'\nimport TableHeader from '../components/dataTable/TableHeader';\nimport { sortByKey } from '../actions';\n\nconst mapDispatchToProps = dispatch => ({\n    sortByKey: (key, isAscending) => dispatch(sortByKey(key, isAscending))\n})\n\nexport default connect(null, \n    mapDispatchToProps\n)(TableHeader)\n","import React from 'react';\nimport { REMOVE } from '../../constants';\n\nconst TableRows = ({rows, removeRow}) => {\n    return rows.map(row => {\n        const { id, cmcRank, symbol, price } = row;\n        return (\n            <tr key={id}>\n                <td>{symbol}</td>\n                <td>{cmcRank}</td>\n                <td>{price}</td>\n                {rows.length > 1 ? <td onClick={removeRow.bind(this, id)}>{REMOVE}</td> : <td className=\"disabled\">{REMOVE}</td>}\n            </tr>\n        )\n    })\n}\n\nexport default TableRows;","import { connect } from 'react-redux'\nimport TableRows from '../components/dataTable/TableRows';\nimport { toggleDisplay } from '../actions';\n\nconst mapStateToProps = state => ({\n    rows: state.cryptocurrencies.items.filter(t => t.isInTrackTable)\n})\n\nconst mapDispatchToProps = dispatch => ({\n    removeRow: id => dispatch(toggleDisplay(id))\n})\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TableRows)\n","import React from 'react';\nimport './DataTable.scss';\nimport CryptocurrenciesTableHeader from '../../containers/CryptocurrenciesTableHeader'\nimport CryptocurrenciesTableRows from '../../containers/CryptocurrenciesTableRows';\n\nconst DataTable = () => {\n    return (\n        <table id='cryptocurrency-table'>\n            <tbody>\n                <CryptocurrenciesTableHeader />\n                <CryptocurrenciesTableRows />\n            </tbody>\n        </table>\n    )\n}\n\nexport default DataTable\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { toggleDisplay, fetchQuotes, triggerAddingLimit } from '../../actions';\nimport './AddList.scss';\n\n\n\nconst AddList = (props) => {\n    const { addListItems, cryptocurrencies, addCryptocurrency, getQuote, preventAdding } = props;\n    const trackedItems = cryptocurrencies.filter(t => t.isInTrackTable);\n\n    const onClick = async item => {\n        if (trackedItems.length < 10) {\n            await getQuote([item.id]);\n            addCryptocurrency(item.id);\n        } else {\n            preventAdding();\n        }\n    }\n\n    return (\n        <ul>\n            {addListItems.map(addListItem =>\n                <li key={addListItem.id} onClick={onClick.bind(this, addListItem)}>\n                    {addListItem.symbol}\n                </li>\n            )}\n        </ul>\n    )\n}\n\nAddList.propTypes = {\n    addListItems: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        isInTrackTable: PropTypes.bool.isRequired,\n        symbol: PropTypes.string.isRequired\n    }).isRequired).isRequired,\n    addCryptocurrency: PropTypes.func.isRequired,\n    getQuote: PropTypes.func.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    cryptocurrencies: state.cryptocurrencies.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    addCryptocurrency: id => dispatch(toggleDisplay(id)),\n    getQuote: ids => dispatch(fetchQuotes(ids)),\n    preventAdding: () => dispatch(triggerAddingLimit())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddList);\n","import React, { useState, useEffect, useCallback} from 'react';\nimport './Dropdown.scss';\nimport AddList from '../addList/AddList';\nimport { ADD_CRYPTOCURRENCY, ADD_LIMIT_MESSAGE } from '../../constants';\n\nconst Dropdown = props => {\n\n    const [menuVisibility, setMenuVisibility] = useState(false);\n    const onDropDownClick = useCallback((e) => {\n        e.preventDefault();\n        setMenuVisibility(!menuVisibility);\n    }, [menuVisibility])\n\n    useEffect(() => {    \n        if(menuVisibility){\n            document.addEventListener('click', onDropDownClick);\n            return () => {\n                document.removeEventListener('click', onDropDownClick);\n            };\n        }\n    }, [menuVisibility, onDropDownClick]);\n\n    const { menuItems, addingLimitReached } = props;\n    return (\n        <div className=\"dropdown-container\">\n            <div className=\"dropdown\">\n                <div className={`dropdown__button ${menuVisibility ? 'show' : ''}`} onClick={onDropDownClick}>{ADD_CRYPTOCURRENCY}</div>\n                {menuVisibility && menuItems.length > 0 ? (<AddList addListItems={menuItems} />) : null}\n            </div>\n            { addingLimitReached && <p className=\"dropdown__error\">{ADD_LIMIT_MESSAGE}</p> }\n        </div>\n    );\n    \n}\n\nDropdown.defaultProps = {\n    menuItems: []\n};\n\nexport default Dropdown;","import React, { Component } from 'react';\nimport './App.scss';\nimport DataTable from '../components/dataTable/DataTable';\nimport { CRYPTOCURRENCY_TRACKER, LOADING_MESSAGE, ERROR_MESSAGE } from '../constants';\nimport Dropdown from './dropdownmenu/Dropdown';\n\nclass App extends Component{\n    componentDidMount(){\n        this.fetchCryptocurrencies();\n    }\n\n    fetchCryptocurrencies = () => {\n        this.props.fetchCryptocurrencies();\n    }\n    \n    render(){\n        const { error, cryptocurrencies, addingLimitReached, loading } = this.props;\n\n        return (\n            <div className=\"app-container\">\n                <h1 className=\"app-container__title\">{CRYPTOCURRENCY_TRACKER}</h1>\n                {loading && <p className=\"loading\">{LOADING_MESSAGE}</p>}\n                {error ? <div className=\"error-container\">{ERROR_MESSAGE} {error.message}<button className=\"fetch-button\" onClick={this.fetchCryptocurrencies}>Try Again</button></div> : \n                <div>\n                    <Dropdown menuItems={cryptocurrencies.filter(t => !t.isInTrackTable)} addingLimitReached={addingLimitReached} />\n                    <DataTable />\n                </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default App","import { connect } from 'react-redux'\nimport { fetchCryptocurrencies } from '../actions'\nimport App from '../components/App';\n\nconst mapStateToProps = state => ({\n    cryptocurrencies: state.cryptocurrencies.items,\n    loading: state.cryptocurrencies.loading,\n    error: state.cryptocurrencies.error,\n    addingLimitReached: state.cryptocurrencies.addingLimitReached\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCryptocurrencies: () => dispatch(fetchCryptocurrencies())\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from \"redux-thunk\";\nimport rootReducer from './reducers';\nimport MainContainer from './containers/MainContainer';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\n\nrender(\n  <Provider store={store}>\n    <MainContainer />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}